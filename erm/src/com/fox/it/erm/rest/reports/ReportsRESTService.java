package com.fox.it.erm.rest.reports;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;


import com.fox.it.erm.ErmException;
import com.fox.it.erm.query.QueryHeader;
import com.fox.it.erm.query.QueryParametersWrapper;
import com.fox.it.erm.query.SavedQuery;
import com.fox.it.erm.rest.RESTService;
import com.fox.it.erm.service.query.QueryService;
import com.fox.it.erm.service.reports.ReportMetaData;
import com.fox.it.erm.service.reports.ReportsProxy;
import com.fox.it.erm.service.reports.ReportsService;

@Path("/report")
public class ReportsRESTService extends RESTService {

	@EJB
	private ReportsService ermReportsService;
	
	@EJB
	private QueryService ermQueryService;
	
	private static final Logger logger = Logger.getLogger(ReportsRESTService.class.getName());
	
	/**
	 * Main method used to retrieve all report data.  I'm calling it METADATA because
	 * it is just the informational data about the reports and the queries/user/product..
	 * not the actual asset (report or query) itself
	 * Design Note: Yves and I decided to use Proxy objects to get all data needed to display
	 * the view on the landing page (e.g. all reports, all savedQueries, etc.  And then use
	 * the Services to get discrete information based on the user requests.  So ReportsProxy
	 * returns everything in one shot to the view regarding what is displayed on the reports page.
	 * But ReportsService or QueryService is called depending on the particular action the user takes
	 * @param @Context HttpServletRequest
	 * @return ReportsProxy
	 */
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/reports")
	public ReportsProxy findAllReportMetadata(@Context HttpServletRequest req) {
		
		String userId = getUserId(req);
		
		logger.log(Level.INFO, "finding all report metadata...");
	
		ReportsProxy reportsProxy = null;
		
		try {
			
			reportsProxy = this.ermReportsService.findAllReportMetadata(userId, isBusiness(req));
		} catch (ErmException e) {
			logger.log(Level.SEVERE,"Error report metadata with userId: " + userId,e);
			throw getErmException(e);
		} 
		
		return reportsProxy;
	}
	
	/**
	 * This method is accessed from the Reports Parameters page when the user has selected
	 * all of the parameters for the reports (held in the json object) and then the user desires
	 * to save these parameters to a named query by clicking "Save Query".  This is different from
	 * the user clicking the "Save" button from the Save Query Dialog.  That "Save" button calls the persist
	 * method from this REST object.
	 * 
	 * Design Note: When you call QueryService.saveQueryParams() you know the user wants to
	 * save the overall query.  So the params have to saved and then the queryHeader information
	 * is returned.  QueryHeader info is: CreateBy (ERM_USER_ROLE.FULL_NM), Source (SVD_RPT.RPT_DESC), Date Saved (CurrentDate), Public (DefaultIndicatorFlag),
	 * the QueryID that is generated by the DB.
	 * The action of clicking the "Save Query" button is going to generate a queryId
	 * @param reportId 
	 * @param foxVersionId as a query parameter
	 * @return QueryHeader
	 */
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	//@Path("/report/query/params/save/{reportId: \\d+}")
	//public QueryHeader saveQueryParams(@Context HttpServletRequest req, 
	@Path("/query/params/retrieve/{reportId: \\d+}")
	public QueryHeader retrieveQueryParams(@Context HttpServletRequest req, 
			@PathParam("reportId") Long reportId,
			@QueryParam("foxVersionId") Long foxVersionId ){
		
		QueryHeader queryHeader = new QueryHeader();
		
		String json = req.getParameter("q");
		String userId = getUserId(req);
		
		logger.log(Level.INFO, "retrieving report query params...");
		
		try {
			
			logger.info("foxVersionId: " + foxVersionId +  " reportId: " + reportId +  " userId: " + userId);
			
			queryHeader = this.ermQueryService.retrieveQueryParams(json, 
					foxVersionId, 
					reportId, 
					userId, 
					isBusiness(req));
		
		} catch (ErmException e) {
			logger.log(Level.SEVERE,"Error save query params failed with userId: " + userId,e);
			throw getErmException(e);
		}
		
		return queryHeader;
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/query/save")
	public List<Long> save(@Context HttpServletRequest req){
		
		String json = req.getParameter("q");
		String userId = getUserId(req);
		List<Long> queryId = new ArrayList<Long>();
		try {
			 Long savedQueryId = this.ermQueryService.save(json, 
					userId, 
					isBusiness(req));
			 queryId.add(savedQueryId);
		} catch (ErmException e) {
			logger.log(Level.SEVERE,"Error: save query failed with userId: " + userId,e);
			throw getErmException(e);
		}
		return queryId;
	}
	
	/*
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/submit/{queryId: \\d+}")
	public ReportMetaData submit(@Context HttpServletRequest req,
			@PathParam("queryId") Long queryId,
			@QueryParam("reportFormatType") Long reportFormatType,
			@QueryParam("reportName") String reportName){
		
		String json = req.getParameter("q");
		String userId = getUserId(req);
		ReportMetaData reportMetaData = null;
		
		//report format values
		//1 = xl
		//2= pdf
		//3 = ahtml
		
		logger.log(Level.INFO, "submitting the query with queryId: " + queryId + " to execute...");
		logger.log(Level.INFO, "submitting the query with reportName: " + reportName + " to execute...");
		
		try {
			//ReportMetaData contains:
			//url to call to reportsServer
			//SSOERMCookie
			 reportMetaData = this.ermReportsService.submit(json,
					reportFormatType,
					reportName,
					userId, 
					isBusiness(req));
			 logger.info("ReportsRESTService.submit() got " + reportMetaData.getQueryId() + " and url: " + reportMetaData.getReportURL());
		
		} catch (ErmException e) {
			logger.log(Level.SEVERE,"Error: submit query failed with userId: " + userId + "queryId: " + queryId,e);
			throw getErmException(e);
		}
		
		return reportMetaData;
		
	}
	*/
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/runQuery")
	public ReportMetaData runQuery(@Context HttpServletRequest req){
		
		String json = req.getParameter("q");
		String userId = getUserId(req);
		ReportMetaData reportMetaData = null;
		
		try {
			 reportMetaData = this.ermReportsService.runQuery(json,userId, isBusiness(req));
			 
			 
			 logger.info("ReportsRESTService.submit() got " + reportMetaData.getQueryId() + " and url: " + reportMetaData.getReportURL());
		
		} catch (ErmException e) {
			logger.log(Level.SEVERE,"Error: run query failed with userId: " + userId);
			throw getErmException(e);
		}
		
		return reportMetaData;
		
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/query/{queryId: \\d+}")
	public QueryParametersWrapper reloadSavedQuery(@Context HttpServletRequest req,
			@PathParam("queryId") Long queryId){
		
		QueryParametersWrapper savedQuery = null;
		
//		String json = req.getParameter("q");
		String userId = getUserId(req);
		
		logger.log(Level.INFO, "retrieving the query with queryId: " + queryId + " now...along with all its parameters");
		
		try {
			
			savedQuery = this.ermQueryService.retrieveQuery(queryId, userId, isBusiness(req));
			logger.log(Level.INFO, savedQuery.toString());
			
			
		} catch (ErmException e) {
			logger.log(Level.SEVERE, e.toString());
		}
	
		return savedQuery;
	}
	
	/**
	 * 
	 * @param req
	 * @return
	 */
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/query/search")
	public List<SavedQuery> findSavedQuery(@Context HttpServletRequest req){
		String json = req.getParameter("q");
		try {
			String userId = getUserId(req);
			return this.ermQueryService.findSavedQuery(json, userId, isBusiness(req));
		} catch (ErmException e) {
			logger.log(Level.SEVERE,"Error finding saved query",e);
			throw getErmException(e);
		}
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/query/delete")
	public List<Long> deleteSavedQuery(@Context HttpServletRequest request){
		try{
			String json = request.getParameter("q");
			return this.ermQueryService.deleteSavedQuery(json, getUserId(request), isBusiness(request));
		}
		catch(Exception ex){
			ex.printStackTrace(System.err);
			throw getErmException(new ErmException(ex));
		}
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path("/query/update")
	public List<Long> updateSavedQuery(@Context HttpServletRequest request){
		try{
			String json = request.getParameter("q");
			String userId = getUserId(request);
			return this.ermQueryService.updateSavedQuery(json, userId, isBusiness(request));
		}
		catch(Exception ex){
			ex.printStackTrace(System.err);
			throw getErmException(new ErmException(ex));
		}
	}
}
